(define system-out (static-field "java.lang.System" "out"))
(define print-stream (class "java.io.PrintStream"))
(define output-stream-println (method system-out "println" "java.lang.Object"))
(define println (lambda (value) (java output-stream-println system-out value)))

(println print-stream)

; lambdas, application, let, define, if, java (call, method, class, field, static field), with-exception-handler & raise, macro hygiene

(with-exception-handler
  (lambda (x)
    (java
      (method
        (static-field "java.lang.System" "out")
        "println"
        "java.lang.Object")
      (static-field
        "java.lang.System"
        "out")
      x))
  (lambda () (raise "help")))

(let-syntax ((foo (syntax-rules ()
				((foo a) ((lambda (x y) x) 1 2)) )))
	(java (method (static-field "java.lang.System" "out") "println" "java.lang.Object") (static-field "java.lang.System" "out") (foo bar))) ; bar should not cause a warning about it being undeclared

; Same as above, just with hygiene tests, should be 25
(let-syntax ((foo (syntax-rules ()
				((foo a) ((lambda (x y) a) 1 2)) )))
	((lambda (x)
	(java (method (static-field "java.lang.System" "out") "println" "java.lang.Object") (static-field "java.lang.System" "out") (foo x))) ; bar should not cause a warning about it being undeclared
	25))

(println 3)

(define-syntax bar
  (syntax-rules ()
    ((bar 0) (println "bar zero"))
    ((bar 1) (println "bar one")) ) )

(let ((print println)
      (println "foo"))
  (print println)
  (bar 0)
  (bar 1) )

#;((lambda (x) (x x)) (lambda (x) (x x))) ; tail call
