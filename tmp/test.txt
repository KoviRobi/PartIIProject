(define system-in (static-field "java.lang.System" "in"))
(define system-out (static-field "java.lang.System" "out"))
(define output-stream-println (method system-out "println" "java.lang.Object"))
(define input-stream-read (method system-in "read"))
(define println (lambda (value) (java output-stream-println system-out value)))
(define read-byte (lambda () (java input-stream-read system-in)))
(define clear (lambda () (println "") (println "") (println "") (println "") (println "") (println "") (println "") (println "") (println "") (println "")))
(clear)
(clear)
(clear)
(read-byte)
(println " - Syntax ambiguity with #|a|#|b|#|c#|")
(read-byte)
(println " - On track")
(read-byte)
(println " - Backup woes")
(read-byte)
(println " - Working demo of the features:")
(read-byte)
; lambdas, application, let, define, if, java (call, method, class, field, static field), with-exception-handler & raise, macro hygiene

; FIXME: Tail calls and exn handlers
#;(with-exception-handler
  (lambda (x)
    (java
      (method
        (static-field "java.lang.System" "out")
        "println"
        "java.lang.Object")
      (static-field
        "java.lang.System"
        "out")
      x))
  (lambda () (raise "Raise and handle exceptions")))

(define-syntax bar
  (syntax-rules ()
    ((bar 0) (println "Hygienic macros"))
    ((bar 1) (println " - no binding introduced or captured")) ) )

(let ((print println)
      (println "Java calls"))
  (print println)
  (bar 0)
  (print " - no binding introduced or captured") )

(println "")
(read-byte)
(define omega (lambda (x) (x x)))
(omega omega) ; tail call
(println "End")
