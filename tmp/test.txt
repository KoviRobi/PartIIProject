(define system-out (static-field "java.lang.System" "out"))
(define output-stream-println (method system-out "println" "java.lang.Object"))
(define println (lambda (value) (java output-stream-println system-out value)))

(println " - Syntax ambiguity with #|a|#|b|#|c#|")
(println " - On track")
(println " - Backup woes")
(println " - Working demo of the features:")

(with-exception-handler
  (lambda (x)
    (println x))
  (lambda () (raise "Raise and handle exceptions")))

(define-syntax bar
  (syntax-rules ()
    ((bar 0) (println "Hygienic macros"))
    ((bar 1) (println " - no binding introduced or captured")) ) )

(let ((print println)
      (println "Java calls"))
  (print println)
  (bar 0)
  (bar 1) )

(println "")
(define omega (lambda (x) (x x)))
;(omega omega) ; tail call
(println "End")
(println (quote (1 2 "Foo" a)))

(define-syntax baz
  (syntax-rules ()
    ((baz x y ...) '((... ...) (x end) (y ... end))) ) )

(println (baz 1 2 3))
(println (baz 4 5))
(println (baz 6))

; More complicated ellipsis macro
(define-syntax structural-match
  (syntax-rules ()
    ((structural-match (x ...) ((y ...) ...))
     '((x (x y) ...) ...) ) ) )

(println
  (structural-match	(a b c)
					((1 2 3)
					(4 5 6)
					(7 8 9 10) ) ) )

; Hygiene test
(define x-hygiene 1)
(define-syntax foo-hygiene
  (syntax-rules ()
    ((foo-hygiene M)
     (let ((y-hygiene 2))
       (println x-hygiene)
       M) ) ) )
(let ((x-hygiene 3)
      (y-hygiene 4) )
  (foo-hygiene (println y-hygiene)) )

(define-syntax dont-call
  (syntax-rules ()
    ((dont-call)
     (syntax-error "I told you to not call me!" 'tired 'want 'to 'sleep) ) ) )
;(dont-call)

(println (quote 'foo))

((lambda (x) (println x))
 ((lambda (x) x)
  4))

; Message passing tests
(define test-class (class "test.JavaCallTest"))
(println test-class)
(println (test-class 'getConstructors))
(define test-object (test-class 'new "Hello, world!"))
((test-class 'new "Hello, world!") 'printMessage)
((test-class 'new) 'printMessage 0)
((test-class 'new) 'printStaticMessage '(1 2 3))
(test-class 'printStaticMessage '(4 5 6))
