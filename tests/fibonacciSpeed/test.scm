(import (scheme base)
        (scheme write)
        (scheme inexact)
        (scheme time))

(define (fib n)
  (cond ((= n 0) 1)
        ((= n 1) 1)
        (else (+ (fib (- n 1))
                 (fib (- n 2)) )) ) )

(define (loop n m f)
  (when (<= n m)
    (f n)
    (loop (+ n 1) m f) ) )

(define (time start end increment samples test)
  (let loop ((n start))
    (when (<= n end)
      (let ((running-mean 0.0) (running-variance 0.0))
        (let sample-loop ((m 1))
          (when (<= m samples)
            (let* ((start (current-jiffy))
                   (result (test n))
                   (end (current-jiffy))
                   (last-running-mean running-mean) )
                 (set! running-mean (+ running-mean (/ (- end start running-mean) m)))
                 (set! running-variance (+ running-variance (* (- end start last-running-mean) (- end start last-running-mean)))) )
          (sample-loop (+ m 1)) ) )
        (display (number->string n))
        (display ", ")
        (display running-mean)
        (display ", ")
        (displayln (sqrt (/ running-variance (- samples 1)))) )
      (loop (+ n increment)) ) ) )

#;(time 0 30 1 100 fib)

(fib 30)

#;(loop 0 30
    (lambda (n)
      (let* ((start (current-jiffy))
             (result (fib n))
             (end (current-jiffy)))
        (display n)
        (display ", ")
        (displayln (- end start)) ) ) )
